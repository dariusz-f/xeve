# This workfow is responsbile for creating deb package and upload it to launchpad.net

name: Launchpad

on:
  workflow_dispatch:

jobs:
  launchpad:

    runs-on: ubuntu-latest

    # Here golbal variables are set!
    env:
      maintainer_mail: "mpeg5@lists.launchpad.net"
      debemail: "mpeg5@lists.launchpad.net"
      debfullname: "MPEG5"
      PPA_URL: "https://launchpad.net/~mpeg5/+archive/ubuntu/xeve"

    steps:
    
    - name: Get sources
      id: vars
      run: |
      
        #Get tag
        TAG=$(curl -s https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest | grep "tag_name" | awk -F\" '{print $4}' | cut -c2- | awk -F\- '{print $1}')
        echo "TAG=$TAG" >> $GITHUB_OUTPUT

        LOCATION=$(curl -s https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest | grep "tarball_url" | awk -F\" '{print $4}')

        #Download file
        curl -L -o xeve-$TAG.tar.gz $LOCATION

        tar -xvf xeve-$TAG.tar.gz
        rm xeve-$TAG.tar.gz
        #TODO: change below line to mpeg5-xeve-*
        mv *-xeve-* xeve-$TAG

        # Create version.txt file for build outside GitHub.
        echo -e "v$TAG" > xeve-$TAG/version.txt

        tar -czf xeve-$TAG.tar.gz xeve-$TAG

        #TODO: check below line
        #rm -rf xeve-$TAG

        echo "Package created form TAG: $TAG :bookmark:" >> $GITHUB_STEP_SUMMARY

    - name: Install dependencies
      run: |
        sudo apt install packaging-dev gnupg

    - name: Prepare package (dh_make)
      run: |
        cd xeve-${{ steps.vars.outputs.TAG }}

        DEBEMAIL=${{ env.debemail }}
        DEBFULLNAME=${{ env.debfullname }}
        export DEBEMAIL DEBFULLNAME
        dh_make -f ../xeve-${{ steps.vars.outputs.TAG }}.tar.gz -c bsd -e ${{ env.maintainer_mail }} --createorig -l -y

        echo "Debemail in package: ${{ env.debemail }}  :email:" >> $GITHUB_STEP_SUMMARY
        echo "Debfullname in package: ${{ env.debfullname }}  :speech_balloon:" >> $GITHUB_STEP_SUMMARY

    - name: Edit sources
      # TODO: Files from this step have to be later integrated with project repository, they shouldn't be fetched from external repo
      run: |
        cd xeve-${{ steps.vars.outputs.TAG }}/debian

        curl -o README.Debian https://raw.githubusercontent.com/dkozinski/xeve/debian-bionic/debian/README.Debian
        curl -o README.source https://raw.githubusercontent.com/dkozinski/xeve/debian-bionic/debian/README.source
        curl -o changelog https://raw.githubusercontent.com/dkozinski/xeve/debian-bionic/debian/changelog
        curl -o compat https://raw.githubusercontent.com/dkozinski/xeve/debian-bionic/debian/compat
        curl -o control https://raw.githubusercontent.com/dkozinski/xeve/debian-bionic/debian/control
        curl -o copyright https://raw.githubusercontent.com/dkozinski/xeve/debian-bionic/debian/copyright
        curl -o files https://raw.githubusercontent.com/dkozinski/xeve/debian-bionic/debian/files
        curl -o rules https://raw.githubusercontent.com/dkozinski/xeve/debian-bionic/debian/rules
        curl -o xeve-base-dev.dirs https://raw.githubusercontent.com/dkozinski/xeve/debian-bionic/debian/xeve-base-dev.dirs
        curl -o xeve-base-dev.install https://raw.githubusercontent.com/dkozinski/xeve/debian-bionic/debian/xeve-base-dev.install
        curl -o xeve-base-docs.docs https://raw.githubusercontent.com/dkozinski/xeve/debian-bionic/debian/xeve-base-docs.docs
        curl -o xeve-base1.dirs https://raw.githubusercontent.com/dkozinski/xeve/debian-bionic/debian/xeve-base1.dirs
        curl -o xeve-base1.install https://raw.githubusercontent.com/dkozinski/xeve/debian-bionic/debian/xeve-base1.install
        curl -o xeve-main-dev.install https://raw.githubusercontent.com/dkozinski/xeve/debian-bionic/debian/xeve-main-dev.install
        curl -o xeve-main-docs.docs https://raw.githubusercontent.com/dkozinski/xeve/debian-bionic/debian/xeve-main-docs.docs
        curl -o xeve-main1.dirs https://raw.githubusercontent.com/dkozinski/xeve/debian-bionic/debian/xeve-main1.dirs
        curl -o xeve-main1.install https://raw.githubusercontent.com/dkozinski/xeve/debian-bionic/debian/xeve-main1.install

        #Remove example and template files
        rm -rf *.ex
    
    - name: 'Upload executable Artifact'
      if: ${{ false }}
      uses: actions/upload-artifact@v3
      with:
        name: download-1
        path: xeve*
        retention-days: 1

    - name: Prepare gpg key
      # https://docs.github.com/en/actions/security-guides/encrypted-secrets#using-encrypted-secrets-in-a-workflow
      run:  |
        echo -e "${{ secrets.GPG_KEY }}" | gpg --import
        gpg --list-keys

    - name: Debuild
      run: |
        cd xeve-${{ steps.vars.outputs.TAG }}

        DEBEMAIL=${{ env.debemail }}
        DEBFULLNAME=${{ env.debfullname }}
        export DEBEMAIL DEBFULLNAME
        debuild -S -sa -k${{secrets.GPG_KEY_ID}}

        # OR
        # dpkg-buildpackage --build=source --no-sign
        # debsign -k ${{ secrets.GPG_KEY_ID }} ../xeve_${{ steps.vars.outputs.TAG }}-1ubuntu1.dsc

    - name: 'Upload Package files'
      if: ${{ false }}
      uses: actions/upload-artifact@v3
      with:
        name: download-2
        path: xeve*
        retention-days: 1

    - name: Push package to launchpad
      run: |
        echo --------
        pwd
        ls -la
        FILE=$(find ./ -maxdepth 1 -iname "*source.changes" -printf "%f\n")
        
        #dput -u ppa:mpeg5/xeve xeve_${{ steps.vars.outputs.TAG }}-1ubuntu1_source.changes
        dput -u ppa:mpeg5/xeve $FILE
        echo "Package placed on: ${{ env.PPA_URL }}  :globe_with_meridians:" >> $GITHUB_STEP_SUMMARY

    - name: Upload logs on fail
      if: ${{ failure() }}
      uses: actions/upload-artifact@v3
      with:
        name: Build failure logs
        path: ${{ runner.temp }}/*
