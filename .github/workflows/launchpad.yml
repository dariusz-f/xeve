# This workfow is used for deploying deb packages on launchpad.net
# It can be run maually when new version have to be deployed.
#
# Supported Ubuntu distributions are listed in matrix job parameters.
# Target PPA repository is listed in job globals env.
#
#   Prerequisities:
#     - Add GPG key and it's ID used for signing package to GitHub Secrets
#     - Upload Public GPG key to launchpad keyserver: gpg --keyserver "https://keyserver.ubuntu.com/#" --send-key <KEY_ID>
#     - Add cmake backports dependency (required for Bionic 18.04 build) on xeve ppa -> https://launchpad.net/~rsjtaylor/+archive/ubuntu/cmake-backports
#

name: Launchpad

on:
  workflow_dispatch:

jobs:

  #Job 1
  prepare:
    runs-on: ubuntu-latest

    # Here golbal variables are set for job "prepare"!
    env:
      maintainer_mail: "mpeg5@lists.launchpad.net"
      debemail: "mpeg5@lists.launchpad.net"
      debfullname: "MPEG5"

    # Job outputs
    outputs:
      output_TAG: ${{ steps.vars.outputs.TAG }}

    steps:

      - name: Get_sources
        id: vars
        run: |
        
          #Get tag
          TAG=$(curl -s https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest | grep "tag_name" | awk -F\" '{print $4}' | cut -c2- | awk -F\- '{print $1}')
          echo "TAG=$TAG" >> $GITHUB_OUTPUT

          LOCATION=$(curl -s https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest | grep "tarball_url" | awk -F\" '{print $4}')

          #Download file
          curl -L -o xeve-$TAG.tar.gz $LOCATION

          tar -xvf xeve-$TAG.tar.gz
          rm xeve-$TAG.tar.gz
          #TODO: change below line to mpeg5-xeve-*
          mv *-xeve-* xeve-$TAG

          # Create version.txt file for build outside GitHub.
          echo -e "v$TAG" > xeve-$TAG/version.txt

          # Remove git related files
          rm -rf xeve-$TAG/.git
          rm -rf xeve-$TAG/.github

          tar -czf xeve-$TAG.tar.gz xeve-$TAG

          echo "Package created form TAG: $TAG :bookmark:" >> $GITHUB_STEP_SUMMARY

      - name: Install dependencies
        run: |
          sudo apt install packaging-dev gnupg

      - name: Prepare package (dh_make)
        run: |
          cd xeve-${{ steps.vars.outputs.TAG }}

          DEBEMAIL=${{ env.debemail }}
          DEBFULLNAME=${{ env.debfullname }}
          export DEBEMAIL DEBFULLNAME
          dh_make -f ../xeve-${{ steps.vars.outputs.TAG }}.tar.gz -c bsd -e ${{ env.maintainer_mail }} -l -y

          echo "Debemail in package: ${{ env.debemail }}  :email:" >> $GITHUB_STEP_SUMMARY
          echo "Debfullname in package: ${{ env.debfullname }}  :speech_balloon:" >> $GITHUB_STEP_SUMMARY

      - name: Edit sources
        # TODO: Files from this step have to be later integrated with project repository, they shouldn't be fetched from external repo
        run: |
          cd xeve-${{ steps.vars.outputs.TAG }}/debian

          # curl -o README.Debian https://raw.githubusercontent.com/dkozinski/xeve/debian-debian/debian/README.Debian
          # curl -o README.source https://raw.githubusercontent.com/dkozinski/xeve/debian-debian/debian/README.source
          # curl -o changelog https://raw.githubusercontent.com/dkozinski/xeve/debian-debian/debian/changelog
          # curl -o compat https://raw.githubusercontent.com/dkozinski/xeve/debian-debian/debian/compat
          # curl -o control https://raw.githubusercontent.com/dkozinski/xeve/debian-debian/debian/control
          # curl -o copyright https://raw.githubusercontent.com/dkozinski/xeve/debian-debian/debian/copyright
          # curl -o files https://raw.githubusercontent.com/dkozinski/xeve/debian-debian/debian/files
          # curl -o rules https://raw.githubusercontent.com/dkozinski/xeve/debian-debian/debian/rules
          # curl -o xeve-base-dev.dirs https://raw.githubusercontent.com/dkozinski/xeve/debian-debian/debian/xeve-base-dev.dirs
          # curl -o xeve-base-dev.install https://raw.githubusercontent.com/dkozinski/xeve/debian-debian/debian/xeve-base-dev.install
          # curl -o xeve-base-docs.docs https://raw.githubusercontent.com/dkozinski/xeve/debian-debian/debian/xeve-base-docs.docs
          # curl -o xeve-base1.dirs https://raw.githubusercontent.com/dkozinski/xeve/debian-debian/debian/xeve-base1.dirs
          # curl -o xeve-base1.install https://raw.githubusercontent.com/dkozinski/xeve/debian-debian/debian/xeve-base1.install
          # curl -o xeve-main-dev.install https://raw.githubusercontent.com/dkozinski/xeve/debian-debian/debian/xeve-main-dev.install
          # curl -o xeve-main-docs.docs https://raw.githubusercontent.com/dkozinski/xeve/debian-debian/debian/xeve-main-docs.docs
          # curl -o xeve-main1.dirs https://raw.githubusercontent.com/dkozinski/xeve/debian-debian/debian/xeve-main1.dirs
          # curl -o xeve-main1.install https://raw.githubusercontent.com/dkozinski/xeve/debian-debian/debian/xeve-main1.install

          mv ../packaging/README.Debian README.Debian
          mv ../packaging/README.source README.source
          mv ../packaging/changelog changelog
          mv ../packaging/compat compat
          mv ../packaging/control control
          mv ../packaging/copyright copyright
          mv ../packaging/files files
          mv ../packaging/rules rules
          mv ../packaging/xeve-base-dev.dirs xeve-base-dev.dirs
          mv ../packaging/xeve-base-dev.install xeve-base-dev.install
          mv ../packaging/xeve-base-docs.docs xeve-base-docs.docs
          mv ../packaging/xeve-base1.dirs xeve-base1.dirs
          mv ../packaging/xeve-base1.install xeve-base1.install
          mv ../packaging/xeve-main-dev.install xeve-main-dev.install
          mv ../packaging/xeve-main-docs.docs xeve-main-docs.docs
          mv ../packaging/xeve-main1.dirs xeve-main1.dirs
          mv ../packaging/xeve-main1.install xeve-main1.install


          #Remove example and template files
          rm -rf *.ex
          
      - name: Archive files
        uses: actions/upload-artifact@v3
        with:
          name: xeve
          path: xeve*
          retention-days: 1

  #Job 2
  build-deploy:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      # max-parallel: 1
      matrix:
        ubuntu: [bionic, focal, jammy]

    # Here golbal variables are set for job "build-deploy"!
    env:
      debemail: "mpeg5@lists.launchpad.net"
      debfullname: "MPEG5"
      PPA: "ppa:mpeg5/xeve"
      PPA_URL: "https://launchpad.net/~mpeg5/+archive/ubuntu/xeve"
      JOB1_TAG: ${{needs.prepare.outputs.output_TAG}}

    steps:

      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: xeve

      - name: Prepare gpg key
        # https://docs.github.com/en/actions/security-guides/encrypted-secrets#using-encrypted-secrets-in-a-workflow
        run:  |
          echo -e "${{ secrets.GPG_KEY }}" | gpg --import
          gpg --list-keys

      - name: Install dependencies
        run: |
          sudo apt install packaging-dev gnupg

      - name: Debuild
        run: |
          cd xeve-$JOB1_TAG

          # Prepare changelog for specific Ubuntu distribution
          if [ ${{ matrix.ubuntu }} = 'bionic' ]; then
            sed -i -E -e "s/(ubuntu)([0-9]{1,2}(.[0-9]{1,2}){0,1})(\)) (bionic|focal|jammy); (urgency=.*)/\11~18.04\4 bionic; \6/g" debian/changelog
            echo "Packages for Ubuntu: ${{ matrix.ubuntu }} :heavy_check_mark:" >> $GITHUB_STEP_SUMMARY
          elif [ ${{ matrix.ubuntu }} = 'focal' ]; then
            sed -i -E -e "s/(ubuntu)([0-9]{1,2}(.[0-9]{1,2}){0,1})(\)) (bionic|focal|jammy); (urgency=.*)/\11~20.04\4 focal; \6/g" debian/changelog
            echo "Packages for Ubuntu: ${{ matrix.ubuntu }} :heavy_check_mark:" >> $GITHUB_STEP_SUMMARY
          elif [ ${{ matrix.ubuntu }} = 'jammy' ]; then
            sed -i -E -e "s/(ubuntu)([0-9]{1,2}(.[0-9]{1,2}){0,1})(\)) (bionic|focal|jammy); (urgency=.*)/\11~22.04\4 jammy; \6/g" debian/changelog
            echo "Packages for Ubuntu: ${{ matrix.ubuntu }} :heavy_check_mark:" >> $GITHUB_STEP_SUMMARY
          else
            echo "Not supported Ubuntu distribution :exclamation:" >> $GITHUB_STEP_SUMMARY
          fi

          DEBEMAIL=${{ env.debemail }}
          DEBFULLNAME=${{ env.debfullname }}
          export DEBEMAIL DEBFULLNAME

          debuild -S -si -k${{secrets.GPG_KEY_ID}}

      # This step will upload package to launchpad.net. 
      # You can simulate this process by passing -s option to dput command.
      - name: Push package to launchpad
        run: |
          FILE=$(find ./ -maxdepth 1 -iname "*source.changes" -printf "%f\n")
          dput -u -s ${{ env.PPA }} $FILE
          echo "Package placed on: ${{ env.PPA_URL }}  :globe_with_meridians:" >> $GITHUB_STEP_SUMMARY

      - name: Upload logs on fail
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: Build failure logs
          path: ${{ runner.temp }}/*